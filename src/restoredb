#!/usr/bin/env php
<?php
// vim: set ts=4 sw=4 sts=4 et:

/**
 * LiteCommerce
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to licensing@litecommerce.com so we can send you a copy immediately.
 *
 * PHP version 5.3.0
 *
 * @category  LiteCommerce
 * @author    Creative Development LLC <info@cdev.ru>
 * @copyright Copyright (c) 2011 Creative Development LLC <info@cdev.ru>. All rights reserved
 * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 * @link      http://www.litecommerce.com/
 */

// No PHP warnings are allowed in LC
error_reporting(E_ALL | E_STRICT);
ini_set('display_errors', true);

function _do_query_upload($sqlfile) {
    global $__connection;

    echo '+++ ' . $sqlfile . PHP_EOL;

    ob_start();
    mysql_query('START TRANSACTION', $__connection);
    query_upload($sqlfile, $__connection, false);
    mysql_query('COMMIT', $__connection);
    $output = ob_get_contents();
    ob_end_clean();
    $output = strip_tags($output);

    if (!empty($output) && preg_match('/\[NOTE:/', $output)) {
        echo PHP_EOL . $output . PHP_EOL;
    }
}

function _do_yaml_upload($yamlfile)
{
    echo '+++ ' . $yamlfile . PHP_EOL;
    \Includes\Decorator\Plugin\Doctrine\Utils\FixturesManager::addFixtureToList($yamlfile);
}


if ($argc > 1) {

    $params = array_unique($argv);

    array_shift($params);

    define('R_INSTALL_DEMO', in_array('demo', $params));
    define('R_DISPLAY_HELP', in_array('help', $params));
    define('R_INSTALL_ADMIN', in_array('admin', $params));
    define('R_INSTALL_STANDALONE', in_array('standalone', $params));
    define('R_INSTALL_SITE', in_array('site', $params));
    define('R_INSTALL_SITEADMIN', in_array('siteadmin', $params));

} else {
    define('R_DISPLAY_HELP', true);
}


if (R_DISPLAY_HELP) {
	echo <<<OUT
Usage: $argv[0] [options]

where:
  options - one or several of the following:
        demo       - install all demo data (excluding the admin user),
        standalone - do not enable DrupalConnector module
        admin      - install admin user account
        site       - install data for website (storefront demo)
        siteadmin  - install data for website (administrator interface demo)

Examples:
  $argv[0]
  $argv[0] demo
  $argv[0] demo admin
  $argv[0] standalone

OUT;
	exit;
}

chdir(__DIR__);

define('LC_DO_NOT_REBUILD_CACHE', true);
define('XLITE_INSTALL_MODE', true);

require_once './top.inc.php';

set_time_limit(0);
error_reporting(E_ALL ^ E_NOTICE);

$config = parse_ini_file('etc/config.default.php', true);

if (file_exists('etc/config.php')) {
    $config = array_replace_recursive($config, parse_ini_file('etc/config.php', true));
}

if (file_exists('etc/config.local.php')) {
    $config = array_replace_recursive($config, parse_ini_file('etc/config.local.php', true));
}

if (R_INSTALL_SITEADMIN) {

    if (file_exists('etc/config.demo.php')) {
        $config = array_replace_recursive($config, parse_ini_file('etc/config.demo.php', true));

    } else {
        die('etc/config.demo.php file required');
    }
}

$config = $config['database_details'];

$config['hostspec'] .= empty($config['socket'])
   ? (empty($config['port']) ? '' : ':' . $config['port'])
   : ':' . $config['socket'];
$__connection = mysql_connect($config['hostspec'], $config['username'], $config['password']);

if (!$__connection || !mysql_select_db($config['database'], $__connection)) {
    echo ('Error of MySQL connection. Check config file');
    die(1);
}

// Check for InnoDB support
$res = mysql_query('SHOW ENGINES');
$innodbFound = false;
while ($row = mysql_fetch_assoc($res)) {
    if (0 === strcasecmp('InnoDB', $row['Engine'])) {
        $innodbFound = true;
    }
}
mysql_free_result($res);

if (!$innodbFound) {
    die('InnoDB support disabled. It is required to LiteCommerce operation' . PHP_EOL);
}

// Drop all tables
echo '+++ Drop all tables';
mysql_query('SET foreign_key_checks=0');

$res = mysql_query('SHOW TABLES LIKE \'xlite_%\'');

$i = 0;
while ($row = mysql_fetch_assoc($res)) {
    $tbl = array_shift($row);
    mysql_query('DROP TABLE ' . $tbl);
    $i++;
}
mysql_free_result($res);

echo ' [' . $i . ']' . PHP_EOL;

$modules = array();
\Includes\Decorator\Plugin\Doctrine\Utils\FixturesManager::removeFixtures();

// modules
$disabledModules = array();

// Common modules which must be disabled always
$disabledModules['CDev'] = array(
    'JoomlaConnector',
    'Taxes',
    'Catalog'
);

if (!R_INSTALL_SITE && !R_INSTALL_SITEADMIN) {
    # Test modules - exclude from website data
    $disabledModules['Test'] = $disabledModules['Test1'] = array(
        'Module1',
        'Module2',
        'Module3',
        'Module4',
        'Module5',
        'Module6',
        'Module7',
        'Module8',
        'Module9',
    );
}

if (R_INSTALL_STANDALONE) {
    // Disable DrupalConnector module in a standalone mode
    $disabledModules['CDev'][] = 'DrupalConnector';
    $disabledModules['CDev'][] = 'XMLSitemapDrupal';
} else {
    // In non-standalone mode we must disable SimpleCMS/SocialLogin 
    // These modules disable DrupalConnector compulsory
    $disabledModules['CDev'][] = 'SimpleCMS';
    $disabledModules['CDev'][] = 'SocialLogin';
    $disabledModules['CDev'][] = 'ContactUs';
}

if (!R_INSTALL_SITE && !R_INSTALL_SITEADMIN) {
    // Disable Demo module in all modes excepting a website one
    $disabledModules['CDev'][] = 'Demo';

} else {
    // Disable modules in a website mode
    $disabledModules['CDev'][] = 'AustraliaPost';
    $disabledModules['CDev'][] = 'AuthorizeNet';
    $disabledModules['CDev'][] = 'Quantum';
    $disabledModules['CDev'][] = 'PaypalWPS';
    $disabledModules['CDev'][] = 'SalesTax';
    $disabledModules['CDev'][] = 'VAT';
    $disabledModules['CDev'][] = 'Moneybookers';
    $disabledModules['CDev'][] = 'USPS';
}


$additionalModules = array();
$moduleFiles = array();

foreach ((array) glob('classes/XLite/Module/*', GLOB_ONLYDIR) as $authorDir) {

    $author = basename($authorDir);

    foreach ((array) glob('classes/XLite/Module/' . $author . '/*/Main.php') as $f) {

        $name = basename(dirname($f));

        if (!isset($disabledModules[$author]) || !in_array($name, $disabledModules[$author])) {

            $yamlFile = dirname($f) . '/install.yaml';

            if (file_exists($yamlFile)) {
                $moduleFiles[] = $yamlFile;
            }

            $yamlFile = 'sql/demo/module.' . $author . '.' . $name .'.yaml';
            if (file_exists($yamlFile)) {
                $additionalModules[] = $yamlFile;
            }

            if (!isset($modules[$author])) {
                $modules[$author] = array();
            }
            $modules[$author][$name] = 1;
        }
    }
}

$files[] = 'sql/xlite_data.yaml';

if (R_INSTALL_SITE) {

    array_splice($files, count($files), 0, $moduleFiles);
    $files[] = 'sql/demo/xlite_demo_data.yaml';
    $files[] = 'sql/site/xlite_demo_store.yaml';
    $files[] = 'sql/site/xlite_demo_user_admin.yaml';
    $files[] = 'sql/demo/xlite_demo_user.yaml';
    $files[] = 'sql/demo/xlite_demo_orders.yaml';

} elseif (R_INSTALL_SITEADMIN) {

    $files[] = 'sql/xlite_demo.yaml';
    array_splice($files, count($files), 0, $moduleFiles);
    $files[] = 'sql/demo/xlite_demo_data.yaml';
    $files[] = 'sql/siteadmin/xlite_demo_user_admin.yaml';
    $files[] = 'sql/siteadmin/xlite_demo_user.yaml';
    $files[] = 'sql/siteadmin/xlite_demo_orders.yaml';

} else {

    if (!R_INSTALL_DEMO) {
        $files[] = 'sql/xlite_demo.yaml';
    }

    array_splice($files, count($files), 0, $moduleFiles);

    if (R_INSTALL_ADMIN) {
        // Install Administrator profile
        $files[] = 'sql/demo/xlite_demo_user_admin.yaml';
    }

    if (R_INSTALL_DEMO) {
        // Install demo data
        $files[] = 'sql/demo/xlite_demo_data.yaml';
        $files[] = 'sql/demo/xlite_demo_store.yaml';
        $files[] = 'sql/demo/xlite_demo_user.yaml';
        $files[] = 'sql/demo/xlite_demo_orders.yaml';
        // $files[] = 'sql/local/xlite_test_accounts.yaml';
    }

    if (file_exists('sql/local/xlite_local_demo.yaml')) {
        $files[] = 'sql/local/xlite_local_demo.yaml';
    }
}

array_splice($files, count($files), 0, $additionalModules);

foreach ($files as $file) {
    !file_exists($file) && die("Error: File $file not found");
}

foreach ($files as $file) {
    _do_yaml_upload($file);
}

// Create modules list
\Includes\Utils\ModulesManager::saveModulesToFile($modules);

// Remove disabled structures
$path = LC_DIR_VAR . '.disabled.structures.php';
if (file_exists($path)) {
    unlink($path);
}

echo 'Setting cache rebuild flag...' . PHP_EOL . PHP_EOL;

\Includes\Decorator\Utils\CacheManager::cleanupCacheIndicators();
\Includes\Utils\FileManager::unlinkRecursive(LC_DIR_LOG);
\Includes\Utils\FileManager::unlinkRecursive(LC_DIR_CACHE_IMAGES);

if (function_exists('apc_clear_cache')) {
    echo 'Clear APC cache' . PHP_EOL . PHP_EOL;
    apc_clear_cache();
}

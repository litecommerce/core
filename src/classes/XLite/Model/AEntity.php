<?php
// vim: set ts=4 sw=4 sts=4 et:

/**
 * LiteCommerce
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to licensing@litecommerce.com so we can send you a copy immediately.
 *
 * PHP version 5.3.0
 *
 * @category  LiteCommerce
 * @author    Creative Development LLC <info@cdev.ru>
 * @copyright Copyright (c) 2011-2012 Creative Development LLC <info@cdev.ru>. All rights reserved
 * @license   http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 * @link      http://www.litecommerce.com/
 */

namespace XLite\Model;

/**
 * Abstract entity
 *
 */
abstract class AEntity extends \XLite\Base\SuperClass
{
    /**
     * Possible action by entity Repo
     */
    const ACTION_INSERT = 'insert';
    const ACTION_UPDATE = 'update';
    const ACTION_DELETE = 'delete';

    /**
     * Cache enabled flag (cache)
     *
     * @var array
     */
    protected static $cacheEnabled = array();

    /**
     * Constructor
     *
     * @param array $data Entity properties OPTIONAL
     *
     * @return void
     */
    public function __construct(array $data = array())
    {
        parent::__construct();

        if (!empty($data)) {
            $this->map($data);
        }
    }

    /**
     * Map data to entity columns
     *
     * @param array $data Data
     *
     * @return boolean
     */
    public function map(array $data)
    {
        foreach ($data as $key => $value) {

            // Map only existing properties with setter methods or direct
            $method = 'set' . \Includes\Utils\Converter::convertToPascalCase($key);

            if (method_exists($this, $method)) {

                // $method is assembled from 'set' + getMethodName()
                $this->$method($value);

            } elseif (property_exists($this, $key)) {

                $this->$key = $value;
            }
        }
    }

    /**
     * Common getter
     *
     * @param string $name Property name
     *
     * @return mixed
     */
    public function __get($name)
    {
        // Accessor method name
        return $this->{'get' . \Includes\Utils\Converter::convertToPascalCase($name)}();
    }

    /**
     * Common setter
     *
     * @param string $name  Property name
     * @param mixed  $value Property value
     *
     * @return mixed
     */
    public function __set($name, $value)
    {
        // Mutator method name
        return $this->{'set' . \Includes\Utils\Converter::convertToPascalCase($name)}($value);
    }

    /**
     * Common isset
     *
     * @param string $name Property name
     *
     * @return boolean
     */
    public function __isset($name)
    {
        return !is_null($this->__get($name));
    }

    /**
     * Common unset
     *
     * @param string $name Property name
     *
     * @return void
     */
    public function __unset($name)
    {
        $this->__set($name, null);
    }

    /**
     * Get entity repository
     *
     * @return \XLite\Model\Doctrine\Repo\AbstractRepo
     */
    public function getRepository()
    {
        return \XLite\Core\Database::getRepo(get_class($this));
    }

    /**
     * Check cache after enity persis or remove
     *
     * @return void
     */
    public function checkCache()
    {
        $class = get_class($this);

        if (!isset(static::$cacheEnabled[$class])) {
            $repo = $this->getRepository();

            static::$cacheEnabled[$class] = ($repo && is_subclass_of($repo, '\XLite\Model\Repo\ARepo'))
                ? $repo->hasCacheCells()
                : false;
        }

        if (static::$cacheEnabled[$class]) {
            $this->getRepository()->deleteCacheByEntity($this);
        }
    }

    /**
     * Detach static
     *
     * @return void
     */
    public function detach()
    {
        \XLite\Core\Database::getEM()->detach($this);
    }

    /**
     * Emulate the Doctrine autogenerated methods.
     * TODO - DEVCODE - to remove!
     *
     * @param string $method Method name
     * @param array  $args   Call arguments OPTIONAL
     *
     * @return mixed
     * @throws \BadMethodCallException
     */
    public function __call($method, array $args = array())
    {
        $result = preg_match('/^(get|set)(\w+)$/Si', $method, $matches) && !empty($matches[2]);

        if ($result) {

            $property = \XLite\Core\Converter::convertFromCamelCase($matches[2]);

            $result = property_exists($this, $property);
        }

        $return = null;

        if ($result) {

            if ('set' === $matches[1]) {

                $this->$property = array_shift($args);

            } else {

                $return = $this->$property;
            }

        } else {

            throw new \BadMethodCallException(
                get_class($this) . '::' . $method . '() - method not exists or invalid getter/setter'
            );
        }

        return $return;
    }

    /**
     * Check if entity is persistent
     *
     * @return boolean
     */
    public function isPersistent()
    {
        return (bool) $this->getUniqueIdentifier();
    }

    /**
     * Get entity unique identifier name
     *
     * @return string
     */
    public function getUniqueIdentifierName()
    {
        return $this->getRepository()->getPrimaryKeyField();
    }

    /**
     * Get entity unique identifier value
     *
     * @return integer
     */
    public function getUniqueIdentifier()
    {
        return $this->{'get' . \Includes\Utils\Converter::convertToPascalCase($this->getUniqueIdentifierName())}();
    }

    /**
     * Update entity
     *
     * @return boolean
     */
    public function update()
    {
        \XLite\Core\Database::getEM()->persist($this);
        \XLite\Core\Database::getEM()->flush();

        return true;
    }

    /**
     * Create entity
     *
     * @return boolean
     */
    public function create()
    {
        return $this->update();
    }

    /**
     * Delete entity
     *
     * @return boolean
     */
    public function delete()
    {
        \XLite\Core\Database::getEM()->remove($this);
        \XLite\Core\Database::getEM()->flush();
        \XLite\Core\Database::getEM()->clear();

        return true;
    }

    /**
     * Clone
     *
     * @return \XLite\Model\AEntity
     */
    public function cloneEntity()
    {
        $class = get_class($this);

        if ($this instanceof \Doctrine\ORM\Proxy\Proxy) {
            $class = get_parent_class($class);
        }

        $entity = new $class();
        $fields = array_keys(\XLite\Core\Database::getEM()->getClassMetadata($class)->fieldMappings);
        $map    = array();

        foreach ($fields as $field) {
            $map[$field] = $this->$field;
        }

        $entity->map($map);

        return $entity;
    }

    /**
     * Since Doctrine lifecycle callbacks do not allow to modify associations, we've added this method
     *
     * @param string $type Type of current operation
     *
     * @return void
     */
    public function prepareEntityBeforeCommit($type)
    {
    }
}

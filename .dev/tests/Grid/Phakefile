<?php
/**
 * LiteCommerce
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to licensing@litecommerce.com so we can send you a copy immediately.
 *
 * @category   LiteCommerce
 * @package    Tests
 * @subpackage Amazon
 * @author     Creative Development LLC <info@cdev.ru>
 * @copyright  Copyright (c) 2010 Creative Development LLC <info@cdev.ru>. All rights reserved
 * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 * @link       http://www.litecommerce.com/
 * @see        ____file_see____
 */

require_once "lib/Cloud.php";


task('clear', function($app)
{
    if (file_exists('data.txt'))
        unlink('data.txt');
    $app['time'] = microtime(true);
});

task('parallel_boot', 'clear', 'setup', 'ec2:check_settings', 'grid:start_hub', 'server:start');

task('parallel', 'parallel_boot', 'grid:start_rc', 'server:test_parallel', 'grid:shutdown');

task('apigen', 'parallel_boot', 'server:apigen', 'grid:shutdown');

task('noweb', 'parallel_boot', 'server:test_noweb', 'grid:shutdown');

task('boot_noweb', 'parallel_boot', 'server:apigen', 'server:test_noweb', function($app)
{
    $app['noweb_time'] = microtime(true);
    $app['cloud']->server->setup($app);
});

task('build_deploy', 'boot_noweb', 'server:test_deploy', function ($app)
{
    $app['deploy_time'] = microtime(true);
});

task('default', 'build_deploy', 'grid:start_rc', 'server:test_parallel', 'grid:shutdown', function ($app)
{
    echo PHP_EOL . "TRACE:  Instance type: " . $app['grid_instance_type'];
    $last = $app['time'];
    if (isset($app['deploy_time'])) {
        echo PHP_EOL . "TRACE:  Time for deploy: " . ($app['deploy_time'] - $app['time']);
        $last = $app['deploy_time'];
    }
    if (isset($app['noweb_time'])) {
        echo PHP_EOL . "TRACE:  Time for non web tests: " . ($app['noweb_time'] - $last);
        $last = $app['noweb_time'];
    }
    echo PHP_EOL . "TRACE:  Time for parallel: " . (microtime(true) - $last);
});

task("setup", function ($app)
{
    $app['remote_control_port_range'] = array_key_exists('remote_control_port_range', $app) ? $app['remote_control_port_range'] : "5555-5555";
    $app['launch_timeout'] = array_key_exists('launch_timeout', $app) ? $app['launch_timeout'] : 240;

    $app['cloud'] = Cloud::getInstance();

    if (!isset($app['farms_count']))
        $app['farms_count'] = 4;

    setup_ec2(isset($app['ec2_dir']) ? $app['ec2_dir'] : null);

    $app['hub_ami'] = exec("ec2-describe-images | grep lc-test-grid | cut -f2");
    $app['lc_ami'] = exec("ec2-describe-images | grep lc_server_64 | cut -f2");

    $app['server_instance_type'] = "c1.medium";
    $app['grid_instance_type'] = "m1.small";

    $app['keypair'] = getenv("EC2_KEYPAIR");
    $app['keypair_name'] = getenv("EC2_KEYPAIR_NAME");

    $app['firefox_profile'] = "/http/selenium/selenium-grid/FirefoxProfile";

    if (!isset($app['screenshots_url']))
        $app['screenshots_url'] = 'http:\/\/localhost\/screenshots';

    $app['server_htdocs'] = '/var/www';

    $app['selenium_grid_path'] = "/http/selenium/selenium-grid";

    $app['server_options'] = array('pwd' => $app['server_htdocs'] . "/xlite", 'keypair' => $app['keypair'], 'user' => 'ubuntu');

    if (!isset($app['log_dir']) || empty($app['log_dir']))
        $app['log_dir'] = realpath('.') . '/logs';
    if (file_exists($app['log_dir'])) {
        exec('rm -rf ' . $app['log_dir']);
    }
    mkdir($app['log_dir']);

});

group("server", function()
{
    desc("Start LC server instance");
    task('start', 'setup', function($app)
    {
        print PHP_EOL . "Starting a new EC2 Instance...";
        $server = LcServer::boot_and_acquire_dns($app['lc_ami'], array('keypair_name' => $app['keypair_name'], 'type' => $app['server_instance_type']));
        $app['cloud']->server = $server;
        print PHP_EOL . "Started new lc server at " . $app['cloud']->server->public_dns;
        $app['cloud']->save();
        $server->setup($app);

    });

    desc("Start tests");
    task('test_seq', 'setup', function($app)
    {
       $app['cloud']->server->test_seq($app);

    });

    desc("Start parallel tests");
    task('test_parallel', 'setup', function($app)
    {
        $server = $app['cloud']->server;
        $server->test_parallel($app);
    });
    desc('Run noweb phpunit tests on LC server with code coverage collecting');
    task('test_noweb', 'setup', function($app)
    {
        $server = $app['cloud']->server;
        $server->test_noweb($app);
    });

    desc('Drupal + LC deployment test');
    task('test_deploy', "setup", function($app)
    {
        $server = $app['cloud']->server;
        $server->test_deploy($app);
    });

    desc("Run apigen");
    task('apigen', 'setup', function($app)
    {
        $server = $app['cloud']->server;
        $server->apigen($app);
    });

    desc("Shutdown lc server instance");
    task('shutdown', "setup", function($app)
    {
        if ($app['cloud']->server) {
            print PHP_EOL . "Shutting down EC2 Instance " . $app['cloud']->server->public_dns . "...";
            $app['cloud']->server->shutdown();
            $app['cloud']->server = null;
            $app['cloud']->save();
        }
    });

});



group("grid", function()
{
    task("start_hub", "setup", function($app)
    {
        $app['cloud']->start_hub($app);
        wait_for_service($app['cloud']->hub->public_dns, 4444, $app['launch_timeout']);
    });


    desc("Open Selenium Grid Hub Console in a browser.");
    task("hub_console", "setup", function($app)
    {
        $app['cloud']->hub->console();
    });

    task("start_rc", function($app)
    {
        $app['cloud']->start_rc($app);
        Ec2Client::authorize_port(22);
        Ec2Client::authorize_port(4444);
        Ec2Client::authorize_port(5900);
        Ec2Client::authorize_port(6000);
        $boundaries = explode("-", $app['remote_control_port_range']);
        for ($i = $boundaries[0]; $i <= (isset($boundaries[1]) ? $boundaries[1] : $boundaries[0]); $i++) {
            Ec2Client::authorize_port($i);
        }
    });

    desc("Shutdown EC2 Instance used to run Selenium Hub.");
    task("shutdown", 'setup', "server:shutdown", function ($app)
    {
        $app['cloud']->shutdown_hub();
        $app['cloud']->shutdown_rc();
    });

    desc("Start Selenium Grid.");
    task("start_all", "start_hub", "start_rc", "server:start");

    desc("View Selenium Grid Hub logs.");
    task('logs', "setup", function($app)
    {
        $app['cloud']->hub->run("tail -200f " . $app['selenium_grid_path'] . "/log/hub.log", array('keypair' => $app['keypair']));
    });

    desc("Visualize what is happening in Remote Control Farms with VNC");
    task('view', "setup", function($app)
    {
        foreach ($app['cloud']->farms as $farm) {
            exec("vncviewer " . $farm->public_dns . " >> /dev/null &");
        }
    });


    desc("Display information about current Selenium Grid");
    task("info", 'setup', function($app)
    {
        print
            PHP_EOL . "EC2 Selenium Grid:
        ==================

        Hub:
        ----"
                . ($app['cloud']->hub ?
                "\n      - Public DNS:  " . $app['cloud']->hub->public_url .
                    "\n      - Private DNS: " . $app['cloud']->hub->private_url .
                    "\n      - Console:     " . $app['cloud']->hub->console_url : "") .
                PHP_EOL .
                "  LC server:
        ----"
                . ($app['cloud']->server ?
                "\n      - Public DNS:  " . $app['cloud']->server->public_dns .
                    "\n      - Private DNS: " . $app['cloud']->server->private_dns .
                    "\n      - Admin URL: " . $app['cloud']->server->admin_url .
                    "\n      - XLite CMS URL: " . $app['cloud']->server->cms_url : "") .
                PHP_EOL .
                "  Remote Control Farms:
        ---------------------"
                . array_reduce_index($app['cloud']->farms, function($val, $el, $key) use($app)
            {
                return $val . PHP_EOL .
                    "       * Farm #$key
                    - Public DNS:  " . $el->public_dns . PHP_EOL
                    . "               - Private DNS: " . $el->private_dns . PHP_EOL
                    . "               - Port Range: " . $app['remote_control_port_range'] . PHP_EOL;

            });
    });

});


###### Settings Recipes ######
group("ec2", function()
{
    desc("Check EC2 related configuration.");
    task('check_settings', function()
    {
        print PHP_EOL . "Validating environment variables...";
        foreach (array("EC2_HOME", "EC2_PRIVATE_KEY", "EC2_CERT", "EC2_KEYPAIR") as $var) {
            if (!getenv($var))
                throw new Exception(PHP_EOL .
                    "+++++++++++++++++++++++++++++++++++++++++++++++
                You must set $var.

                Read http://docs.amazonwebservices.com/AWSEC2/2007-08-29/GettingStartedGuide/?ref=get-started
                for more details.

                ++++++++++++++++++++++++++++++++++++++++++++++++" . PHP_EOL);
        }
        foreach (array("EC2_PRIVATE_KEY", "EC2_CERT", "EC2_KEYPAIR") as $var) {
            if (!file_exists(getenv($var)))
                throw new Exception("$var environment variable does not point to a valid path: '" . getenv($var) . "'");
        }
        print PHP_EOL . "EC2 Version: " . Ec2Client::version();
        print PHP_EOL . "Validated EC2 settings.";

    });
});

/**
 * @param $url
 * @param $port
 * @param $timeout
 * @return bool
 */
function wait_for_service($url, $port, $timeout)
{
    $time = time() + $timeout;
    while ($time > time()) {
        $ch = curl_init($url . ':' . $port);
        curl_setopt($ch, CURLOPT_HEADER, TRUE);
        curl_setopt($ch, CURLOPT_NOBODY, TRUE); // remove body
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
        curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        if ($httpCode == 200)
            return true;
    }
    return false;
}

function array_reduce_index($array, $callback, $initial = null)
{
    foreach ($array as $key => $element) {
        $initial = call_user_func($callback, $initial, $element, $key);
    }
    return $initial;
}

function setup_ec2($dir = null){
    echo $dir;
    if (realpath($dir) && $dir !== null){
        $dir = realpath($dir);
        putenv("EC2_HOME=$dir/tools");
        putenv("EC2_PRIVATE_KEY=$dir/pk-XQNBCXEZPL3CVVWJ7VFULNKEZDB2R533.pem");
        putenv("EC2_CERT=$dir/cert-XQNBCXEZPL3CVVWJ7VFULNKEZDB2R533.pem");
        putenv("EC2_KEYPAIR=$dir/lc-test.pem");
        putenv("EC2_KEYPAIR_NAME=lc-test");
        $path = getenv("PATH") . PATH_SEPARATOR . "$dir/tools/bin";
        putenv("PATH=$path");

    }
}

?>
